TYPE_I32 = -1
TYPE_I64 = -2
TYPE_F32 = -3
TYPE_F64 = -4
TYPE_V128 = -5
TYPE_NULLFUNCREF = -13
TYPE_NULLEXTERNREF = -14
TYPE_NULLREF = -15
TYPE_FUNCREF = -16
TYPE_EXTERNREF = -17
TYPE_ANYREF = -18
TYPE_EQREF = -19
TYPE_I31REF = -20
TYPE_STRUCTREF = -21
TYPE_ARRAYREF = -22
TYPE_EXN = -23
TYPE_REF = -28
TYPE_REF_NULL = -29
TYPE_FUNC = -32
TYPE_STRUCT = -33
TYPE_ARRAY = -34
TYPE_SUB = -48
TYPE_SUBFINAL = -49
TYPE_REC = -50
TYPE_VOID = -64
TYPE_REPR =  {-1: 'i32', -2: 'i64', -3: 'f32', -4: 'f64', -5: 'v128', -13: 'nullfuncref', -14: 'nullexternref', -15: 'nullref', -16: 'funcref', -17: 'externref', -18: 'anyref', -19: 'eqref', -20: 'i31ref', -21: 'structref', -22: 'arrayref', -23: 'exn', -28: 'ref', -29: 'ref_null', -32: 'func', -33: 'struct', -34: 'array', -48: 'sub', -49: 'subfinal', -50: 'rec', -64: 'void'}
SEC_TYPE = 1
SEC_IMPORT = 2
SEC_FUNCTION = 3
SEC_TABLE = 4
SEC_MEMORY = 5
SEC_EXCEPTION = 13
SEC_GLOBAL = 6
SEC_EXPORT = 7
SEC_START = 8
SEC_ELEMENT = 9
SEC_CODE = 10
SEC_DATA = 11
SEC_DATACOUNT = 12
INSTR_UNREACHABLE = 0X0
INSTR_NOP = 0X1
INSTR_BLOCK = 0X2
INSTR_LOOP = 0X3
INSTR_IF = 0X4
INSTR_ELSE = 0X5
INSTR_TRY = 0X6
INSTR_CATCH = 0X7
INSTR_THROW = 0X8
INSTR_RETHROW = 0X9
INSTR_THROW_REF = 0XA
INSTR_BR = 0XC
INSTR_BR_IF = 0XD
INSTR_BR_TABLE = 0XE
INSTR_RETURN = 0XF
INSTR_DELEGATE = 0X18
INSTR_CATCH_ALL = 0X19
INSTR_DROP = 0X1A
INSTR_SELECT = 0X1B
INSTR_ANNOTATED_SELECT = 0X1C
INSTR_TRY_TABLE = 0X1F
INSTR_END = 0XB
INSTR_I32_CONST = 0X41
INSTR_I64_CONST = 0X42
INSTR_F64_CONST = 0X44
INSTR_F32_CONST = 0X43
INSTR_REF_NULL = 0XD0
INSTR_REF_IS_NULL = 0XD1
INSTR_REF_FUNC = 0XD2
INSTR_REF_EQ = 0XD3
INSTR_REF_AS_NON_NULL = 0XD4
INSTR_BR_ON_NULL = 0XD5
INSTR_BR_ON_NON_NULL = 0XD6
INSTR_GET_LOCAL = 0X20
INSTR_SET_LOCAL = 0X21
INSTR_TEE_LOCAL = 0X22
INSTR_GET_GLOBAL = 0X23
INSTR_SET_GLOBAL = 0X24
INSTR_TABLE_GET = 0X25
INSTR_TABLE_SET = 0X26
INSTR_CALL = 0X10
INSTR_CALL_INDIRECT = 0X11
INSTR_CALL_REF = 0X14
INSTR_TAIL_CALL = 0X12
INSTR_TAIL_CALL_INDIRECT = 0X13
INSTR_TAIL_CALL_REF = 0X15
INSTR_I32_LOAD8_S = 0X2C
INSTR_I32_LOAD8_U = 0X2D
INSTR_I32_LOAD16_S = 0X2E
INSTR_I32_LOAD16_U = 0X2F
INSTR_I64_LOAD8_S = 0X30
INSTR_I64_LOAD8_U = 0X31
INSTR_I64_LOAD16_S = 0X32
INSTR_I64_LOAD16_U = 0X33
INSTR_I64_LOAD32_S = 0X34
INSTR_I64_LOAD32_U = 0X35
INSTR_I32_LOAD = 0X28
INSTR_I64_LOAD = 0X29
INSTR_F32_LOAD = 0X2A
INSTR_F64_LOAD = 0X2B
INSTR_I32_STORE8 = 0X3A
INSTR_I32_STORE16 = 0X3B
INSTR_I64_STORE8 = 0X3C
INSTR_I64_STORE16 = 0X3D
INSTR_I64_STORE32 = 0X3E
INSTR_I32_STORE = 0X36
INSTR_I64_STORE = 0X37
INSTR_F32_STORE = 0X38
INSTR_F64_STORE = 0X39
INSTR_CURRENT_MEMORY = 0X3F
INSTR_GROW_MEMORY = 0X40
INSTR_I32_ADD = 0X6A
INSTR_I32_SUB = 0X6B
INSTR_I32_MUL = 0X6C
INSTR_I32_DIV_S = 0X6D
INSTR_I32_DIV_U = 0X6E
INSTR_I32_REM_S = 0X6F
INSTR_I32_REM_U = 0X70
INSTR_I32_AND = 0X71
INSTR_I32_OR = 0X72
INSTR_I32_XOR = 0X73
INSTR_I32_SHL = 0X74
INSTR_I32_SHR_U = 0X76
INSTR_I32_SHR_S = 0X75
INSTR_I32_ROTR = 0X78
INSTR_I32_ROTL = 0X77
INSTR_I32_EQ = 0X46
INSTR_I32_NE = 0X47
INSTR_I32_LT_S = 0X48
INSTR_I32_LE_S = 0X4C
INSTR_I32_LT_U = 0X49
INSTR_I32_LE_U = 0X4D
INSTR_I32_GT_S = 0X4A
INSTR_I32_GE_S = 0X4E
INSTR_I32_GT_U = 0X4B
INSTR_I32_GE_U = 0X4F
INSTR_I32_CLZ = 0X67
INSTR_I32_CTZ = 0X68
INSTR_I32_POPCNT = 0X69
INSTR_I32_EQZ = 0X45
INSTR_I64_ADD = 0X7C
INSTR_I64_SUB = 0X7D
INSTR_I64_MUL = 0X7E
INSTR_I64_DIV_S = 0X7F
INSTR_I64_DIV_U = 0X80
INSTR_I64_REM_S = 0X81
INSTR_I64_REM_U = 0X82
INSTR_I64_AND = 0X83
INSTR_I64_OR = 0X84
INSTR_I64_XOR = 0X85
INSTR_I64_SHL = 0X86
INSTR_I64_SHR_U = 0X88
INSTR_I64_SHR_S = 0X87
INSTR_I64_ROTR = 0X8A
INSTR_I64_ROTL = 0X89
INSTR_I64_EQ = 0X51
INSTR_I64_NE = 0X52
INSTR_I64_LT_S = 0X53
INSTR_I64_LE_S = 0X57
INSTR_I64_LT_U = 0X54
INSTR_I64_LE_U = 0X58
INSTR_I64_GT_S = 0X55
INSTR_I64_GE_S = 0X59
INSTR_I64_GT_U = 0X56
INSTR_I64_GE_U = 0X5A
INSTR_I64_CLZ = 0X79
INSTR_I64_CTZ = 0X7A
INSTR_I64_POPCNT = 0X7B
INSTR_I64_EQZ = 0X50
INSTR_F32_ADD = 0X92
INSTR_F32_SUB = 0X93
INSTR_F32_MUL = 0X94
INSTR_F32_DIV = 0X95
INSTR_F32_MIN = 0X96
INSTR_F32_MAX = 0X97
INSTR_F32_ABS = 0X8B
INSTR_F32_NEG = 0X8C
INSTR_F32_COPYSIGN = 0X98
INSTR_F32_CEIL = 0X8D
INSTR_F32_FLOOR = 0X8E
INSTR_F32_TRUNC = 0X8F
INSTR_F32_NEAREST = 0X90
INSTR_F32_SQRT = 0X91
INSTR_F32_EQ = 0X5B
INSTR_F32_NE = 0X5C
INSTR_F32_LT = 0X5D
INSTR_F32_LE = 0X5F
INSTR_F32_GT = 0X5E
INSTR_F32_GE = 0X60
INSTR_F64_ADD = 0XA0
INSTR_F64_SUB = 0XA1
INSTR_F64_MUL = 0XA2
INSTR_F64_DIV = 0XA3
INSTR_F64_MIN = 0XA4
INSTR_F64_MAX = 0XA5
INSTR_F64_ABS = 0X99
INSTR_F64_NEG = 0X9A
INSTR_F64_COPYSIGN = 0XA6
INSTR_F64_CEIL = 0X9B
INSTR_F64_FLOOR = 0X9C
INSTR_F64_TRUNC = 0X9D
INSTR_F64_NEAREST = 0X9E
INSTR_F64_SQRT = 0X9F
INSTR_F64_EQ = 0X61
INSTR_F64_NE = 0X62
INSTR_F64_LT = 0X63
INSTR_F64_LE = 0X65
INSTR_F64_GT = 0X64
INSTR_F64_GE = 0X66
INSTR_I32_TRUNC_S_F32 = 0XA8
INSTR_I32_TRUNC_S_F64 = 0XAA
INSTR_I32_TRUNC_U_F32 = 0XA9
INSTR_I32_TRUNC_U_F64 = 0XAB
INSTR_I32_WRAP_I64 = 0XA7
INSTR_I64_TRUNC_S_F32 = 0XAE
INSTR_I64_TRUNC_S_F64 = 0XB0
INSTR_I64_TRUNC_U_F32 = 0XAF
INSTR_I64_TRUNC_U_F64 = 0XB1
INSTR_I64_EXTEND_S_I32 = 0XAC
INSTR_I64_EXTEND_U_I32 = 0XAD
INSTR_F32_CONVERT_S_I32 = 0XB2
INSTR_F32_CONVERT_U_I32 = 0XB3
INSTR_F32_CONVERT_S_I64 = 0XB4
INSTR_F32_CONVERT_U_I64 = 0XB5
INSTR_F32_DEMOTE_F64 = 0XB6
INSTR_F32_REINTERPRET_I32 = 0XBE
INSTR_F64_CONVERT_S_I32 = 0XB7
INSTR_F64_CONVERT_U_I32 = 0XB8
INSTR_F64_CONVERT_S_I64 = 0XB9
INSTR_F64_CONVERT_U_I64 = 0XBA
INSTR_F64_PROMOTE_F32 = 0XBB
INSTR_F64_REINTERPRET_I64 = 0XBF
INSTR_I32_REINTERPRET_F32 = 0XBC
INSTR_I64_REINTERPRET_F64 = 0XBD
INSTR_I32_EXTEND8_S = 0XC0
INSTR_I32_EXTEND16_S = 0XC1
INSTR_I64_EXTEND8_S = 0XC2
INSTR_I64_EXTEND16_S = 0XC3
INSTR_I64_EXTEND32_S = 0XC4
INSTR_REPR =  {0: 'unreachable', 1: 'nop', 2: 'block', 3: 'loop', 4: 'if', 5: 'else', 6: 'try', 7: 'catch', 8: 'throw', 9: 'rethrow', 10: 'throw_ref', 12: 'br', 13: 'br_if', 14: 'br_table', 15: 'return', 24: 'delegate', 25: 'catch_all', 26: 'drop', 27: 'select', 28: 'annotated_select', 31: 'try_table', 11: 'end', 65: 'i32.const', 66: 'i64.const', 68: 'f64.const', 67: 'f32.const', 208: 'ref.null', 209: 'ref.is_null', 210: 'ref.func', 211: 'ref.eq', 212: 'ref.as_non_null', 213: 'br_on_null', 214: 'br_on_non_null', 32: 'get_local', 33: 'set_local', 34: 'tee_local', 35: 'get_global', 36: 'set_global', 37: 'table.get', 38: 'table.set', 16: 'call', 17: 'call_indirect', 20: 'call_ref', 18: 'tail_call', 19: 'tail_call_indirect', 21: 'tail_call_ref', 44: 'i32.load8_s', 45: 'i32.load8_u', 46: 'i32.load16_s', 47: 'i32.load16_u', 48: 'i64.load8_s', 49: 'i64.load8_u', 50: 'i64.load16_s', 51: 'i64.load16_u', 52: 'i64.load32_s', 53: 'i64.load32_u', 40: 'i32.load', 41: 'i64.load', 42: 'f32.load', 43: 'f64.load', 58: 'i32.store8', 59: 'i32.store16', 60: 'i64.store8', 61: 'i64.store16', 62: 'i64.store32', 54: 'i32.store', 55: 'i64.store', 56: 'f32.store', 57: 'f64.store', 63: 'current_memory', 64: 'grow_memory', 106: 'i32.add', 107: 'i32.sub', 108: 'i32.mul', 109: 'i32.div_s', 110: 'i32.div_u', 111: 'i32.rem_s', 112: 'i32.rem_u', 113: 'i32.and', 114: 'i32.or', 115: 'i32.xor', 116: 'i32.shl', 118: 'i32.shr_u', 117: 'i32.shr_s', 120: 'i32.rotr', 119: 'i32.rotl', 70: 'i32.eq', 71: 'i32.ne', 72: 'i32.lt_s', 76: 'i32.le_s', 73: 'i32.lt_u', 77: 'i32.le_u', 74: 'i32.gt_s', 78: 'i32.ge_s', 75: 'i32.gt_u', 79: 'i32.ge_u', 103: 'i32.clz', 104: 'i32.ctz', 105: 'i32.popcnt', 69: 'i32.eqz', 124: 'i64.add', 125: 'i64.sub', 126: 'i64.mul', 127: 'i64.div_s', 128: 'i64.div_u', 129: 'i64.rem_s', 130: 'i64.rem_u', 131: 'i64.and', 132: 'i64.or', 133: 'i64.xor', 134: 'i64.shl', 136: 'i64.shr_u', 135: 'i64.shr_s', 138: 'i64.rotr', 137: 'i64.rotl', 81: 'i64.eq', 82: 'i64.ne', 83: 'i64.lt_s', 87: 'i64.le_s', 84: 'i64.lt_u', 88: 'i64.le_u', 85: 'i64.gt_s', 89: 'i64.ge_s', 86: 'i64.gt_u', 90: 'i64.ge_u', 121: 'i64.clz', 122: 'i64.ctz', 123: 'i64.popcnt', 80: 'i64.eqz', 146: 'f32.add', 147: 'f32.sub', 148: 'f32.mul', 149: 'f32.div', 150: 'f32.min', 151: 'f32.max', 139: 'f32.abs', 140: 'f32.neg', 152: 'f32.copysign', 141: 'f32.ceil', 142: 'f32.floor', 143: 'f32.trunc', 144: 'f32.nearest', 145: 'f32.sqrt', 91: 'f32.eq', 92: 'f32.ne', 93: 'f32.lt', 95: 'f32.le', 94: 'f32.gt', 96: 'f32.ge', 160: 'f64.add', 161: 'f64.sub', 162: 'f64.mul', 163: 'f64.div', 164: 'f64.min', 165: 'f64.max', 153: 'f64.abs', 154: 'f64.neg', 166: 'f64.copysign', 155: 'f64.ceil', 156: 'f64.floor', 157: 'f64.trunc', 158: 'f64.nearest', 159: 'f64.sqrt', 97: 'f64.eq', 98: 'f64.ne', 99: 'f64.lt', 101: 'f64.le', 100: 'f64.gt', 102: 'f64.ge', 168: 'i32.trunc_s/f32', 170: 'i32.trunc_s/f64', 169: 'i32.trunc_u/f32', 171: 'i32.trunc_u/f64', 167: 'i32.wrap/i64', 174: 'i64.trunc_s/f32', 176: 'i64.trunc_s/f64', 175: 'i64.trunc_u/f32', 177: 'i64.trunc_u/f64', 172: 'i64.extend_s/i32', 173: 'i64.extend_u/i32', 178: 'f32.convert_s/i32', 179: 'f32.convert_u/i32', 180: 'f32.convert_s/i64', 181: 'f32.convert_u/i64', 182: 'f32.demote/f64', 190: 'f32.reinterpret/i32', 183: 'f64.convert_s/i32', 184: 'f64.convert_u/i32', 185: 'f64.convert_s/i64', 186: 'f64.convert_u/i64', 187: 'f64.promote/f32', 191: 'f64.reinterpret/i64', 188: 'i32.reinterpret/f32', 189: 'i64.reinterpret/f64', 192: 'i32.extend8_s', 193: 'i32.extend16_s', 194: 'i64.extend8_s', 195: 'i64.extend16_s', 196: 'i64.extend32_s'}
